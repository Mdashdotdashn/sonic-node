start = command

//---------------------- Basic types

digit
	= d:[0-9]
    	{ return d;}

positive_integer
  = d:digit+
      { return d.join("");}

integer
  = n:"-"? d:digit+
      { return (n?n:"") + d;}

space = " ";

word = chars:[a-zA-Z]+
  { return chars.join(""); }

comma = space* "," space*;

//---------------------- Notes

note 
  = n:[a-g] m:[b#]?
    { return (m === null) ? n : n+m; }

//---------------------- Chord progressions

chord_repetition // {1,2,3}x4
  = c:chord_list "x" r:digit
    { var res = c  ; for (var i = 0; i < r -1;i++) { res = res.concat(c) ;}; return res;} 

chord_element
  = d:digit
    { return [d];}
  / r:chord_repetition
    { return r;}

commaed_chord_element
	= comma e:chord_element
		{ return e; }

chord_list // list of elements
  = "{" space* e:chord_element c:commaed_chord_element* space* "}"
    { var v = e.concat(c); return v; }

scale_definition 
  = n:note " " w:word
    { return { root: n, scale: w}; }

//----------------------- Commands

chord_progression // expect chord and some list in brackets
  = "progression" " " d:chord_list 
    { return { method: "setProgression", arguments: d.toString().split(",")} }

clear
  = "clear"
    { return { method: "setProgression", arguments : []}}

exit
  = "exit"
    { return { method: "exit" , arguments : []}}

debug
  = "debug"
    { return { method: "debug" , arguments : []}}

scale
  = "scale" space* s:scale_definition
    { return { method: "setScale", arguments: s }}

resolution
  = "resolution" space* n:positive_integer
    { return { method: "setResolution", arguments: n}}

inversion
  = "inversion" space* n:integer
    { return { method: "setInversion", arguments: n}}

rectification_method
  = "none" { return 0 ;}
  / "sequential" { return 1;} 
  / "first" { return 2;} 
  / "inwards" { return 3;}

rectify
  = "rectify" space* m:rectification_method
  { return { method: "setRectification", arguments : m}}

//----------------------- Main

command
  = chord_progression / exit / scale / debug / resolution / clear / inversion / rectify