{
	var eval_roman_numeral = function(numeral)
	{
		switch(numeral.toLowerCase())
		{
			case 'i':
				return 1;
			case 'ii':
				return 2;
			case 'iii':
				return 3;
			case 'iv':
				return 4;
			case 'v':
				return 5;
			case 'vi':
				return 6;
			case 'vii':
				return 7;
		}
	}
}

start = command

//---------------------- Basic types

digit
	= d:[0-9]
    	{ return d;}

positive_integer
  = d:digit+
      { return d.join("");}

integer
  = n:"-"? d:digit+
      { return (n?n:"") + d.join("");}

word = chars:[a-z_\-A-Z0-9]+
  { return chars.join(""); }

percentage
	= positive_integer

//---------------------- Notes

note
  = n:[a-g] m:[b#]?
    { return (m === null) ? n : n+m; }

//---------------------- Tokens

space = " ";

comma = space* "," space*;

token_list_head = space* "{" space*;
token_list_tail = space* "}" space*;

//---------------------- Scale degree progressions

chord_alteration
	= a: ('M'/'m'/'+'/'sus4')
		{ return a;}

major_numeral
	= d:('VII'/'VI'/'V'/'IV'/'III'/'II'/'I')
	{ return eval_roman_numeral(d)+"M" ;}

minor_numeral
	= d:('vii'/'vi'/'v'/'iv'/'iii'/'ii'/'i')
	{ return eval_roman_numeral(d)+"m" ;}

scale_degree_numeral
	= minor_numeral / major_numeral

scale_degree_element
  = b:'b'i* d:digit a:chord_alteration*
    { return [b+d+a];}
	/ b:'b'i* r:scale_degree_numeral
		{ return [b+r];}

scale_degree_list // list of elements
  = token_list_head l:(e:scale_degree_element comma? space* { return e;})+ token_list_tail
    { console.log(l) ; return l; }

//----------------------- Notes

commaed_note
	= comma e:note
		{ return e; }

note_list
  = token_list_head space* e:note c:commaed_note* space* token_list_tail
    { var a = [e]; var v = a.concat(c); return v; }


//----------------------- Chords

chord_element // note, optional minor,
	= n:note m:[m]?
		{
		 	var result = n;
			if (m) result +=m;
			return [result];
		}

commaed_chord_element
	= comma e:chord_element
		{ return e; }

chord_list
	= token_list_head space* e:chord_element c:commaed_chord_element* space* token_list_tail
	  { var v = e.concat(c); return v; }

//----------------------- scale

scale_definition
  = n:note " " w:word
    { return { root: n, scale: w}; }

//----------------------- Transformations

sequence_transform
	= "legato"i space* p:percentage
	{ return { method: "pushTransformation", arguments: { name: "legato", parameters : { amount: p}}}}
	/ "speed"i space* p:percentage
	{ return { method: "pushTransformation", arguments: { name: "speed", parameters : { amount: p}}}}
	/ "reset"i
	{ return { method: "resetTransformation", arguments: {}}}

//----------------------- Commands

chord_progression // expect chord and some list in brackets
  = "progression"i " " d:scale_degree_list
    { return { method: "setProgression", arguments: d.toString().split(",")} }

clear
  = "clear"i
    { return { method: "setProgression", arguments : []}}

exit
  = "exit"i
    { return { method: "exit" , arguments : []}}

debug
  = "debug"i
    { return { method: "debug" , arguments : []}}

scale
  = "scale"i space* s:scale_definition
    { return { method: "setScale", arguments: s }}

resolution
  = "resolution"i space* n:positive_integer
    { return { method: "setResolution", arguments: n}}

signature
	= "signature"i space* n:positive_integer "/" d: positive_integer
		{ return { method: "setSignature", arguments: { numerator:n, denominator:d}}}

inversion
  = "inversion"i space* n:integer
    { return { method: "setInversion", arguments: n}}

rectification_method
  = "none" { return 0 ;}
  / "sequential" { return 1;}
  / "first" { return 2;}
  / "inwards" { return 3;}

rectify
  = "rectify"i space* m:rectification_method
  { return { method: "setRectification", arguments : m}}

analysis
  = "chords"i space* l:chord_list
	{ return { method: "analyseChords", arguments: l.toString().split(",")} }
  / "notes"i space* n:note_list
	{ return { method: "analyseNotes", arguments: n.toString().split(",")} }

analyse
  = "analyze"i	space* a:analysis
	{ return a;}

tempo
  = "tempo"i space* t:positive_integer
	{ return { method: "setTempo", arguments: {tempo: t}}}

sequence_action
	= "load"i space* n:word
	{ return { method: "loadSequence", arguments: {name: n}} }
	/ "list"i
	{ return {method: "listSequences", arguments: {}} }
	/ "transform"i space* t:sequence_transform
	{ return t;}

player_action
	= "select"i space* v:integer
	{ return { method: "selectPlayer", arguments: { value: v}}}

sequence
  = "sequence"i space* a:sequence_action
	{ return a};

player
  = "player"i space* a:player_action
	{ return a};

transpose
  = "transpose"i space* v:integer
  { return { method: "transpose", arguments: { value: v}}}

//----------------------- Main

command
  = chord_progression / exit / scale / debug / resolution / clear / inversion / rectify / analyse / signature / tempo / transpose / sequence / player
